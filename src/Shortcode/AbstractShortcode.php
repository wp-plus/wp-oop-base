<?php

namespace WpPlus\WpOopBase\Shortcode;

use UnexpectedValueException;

abstract class AbstractShortcode
{
    /**
     * @return string Shortcode tag name.
     */
    abstract public function getTag(): string;

    /**
     * Entire list of supported attributes and their defaults ((key, value) pairs).
     */
    abstract protected function getSupportedAttributes(): array;

    /**
     * Actual shortcode implementation.
     */
    abstract protected function doShortcode(array $attributes, string|null $content): string;

    /**
     * Whether extra attributes (not defined in getSupportedAttributes()) are allowed and forwarded to doShortcode().
     * Defaults to false.
     */
    protected function allowExtraAttributes(): bool
    {
        return false;
    }

    private function normalizeAttributes(array $attributes): array
    {
        $supportedAttributes = $this->getSupportedAttributes();

        $normalizedAttributes = shortcode_atts($supportedAttributes, $attributes);

        if ($this->allowExtraAttributes()) {
            $normalizedAttributes = array_merge($normalizedAttributes, $attributes);
        }

        return $normalizedAttributes;
    }

    /**
     * Register shortcode.
     * @throws UnexpectedValueException
     */
    public function register(): static
    {
        $tag = $this->getTag();
        if (empty($tag)) {
            throw new UnexpectedValueException('Tag name should not be empty (' . get_class($this) . ')!');
        }

        add_shortcode($tag, function(array $attributes, string|null $content) {
            return $this->doShortcode($this->normalizeAttributes($attributes), $content);
        });

        return $this;
    }

    /**
     * Directly execute shortcode, without registering it and adding the shortcode tag somewhere into the content.
     * @param bool $return Return or echo result generated by shortcode
     */
    public function execute(array $attributes = [], string|null $content = null, bool $return = false): string|null
    {
        $result = $this->doShortcode($this->normalizeAttributes($attributes), $content);

        if ($return) {
            return $result;
        }

        echo $result;
        return null;
    }
}
